<# 
// * Auto MsSql To Model Generater v2.0.0
// * (c) 2021-present Neil Hsieh
// * Released without License.
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ include file="ModelAuto.ttinclude"#>
<#@ output extension=".cs" #>

<# 
    //《Auto MsSql To Model Generater》
    // Step1: Connection String Setting.
    string connectionString ="Data Source=127.0.0.1;Initial Catalog=northwind;User ID=sa;Password=sa;";

    // Step2: Customize your namespace.
    var customNameSpace = "Everfuntravel.Interview.Models";

    // Step3: Remove specfic table. (If some tables does not needed, then add those table name to the string array below.)
    var withoutSpecficTableArray = new string[] { "NoNeedTable" };

    // Step4: Only update specfic tables. (If you only need specfic tables, then add those table name to the string array below.)
    //  Warning: If you want to update 'All' tables, 'Must' let [onlyUpdateSpecficTableArray] empty.
    //  Warning: If you want to update 'All' tables, 'Must' let [onlyUpdateSpecficTableArray] empty.
    //  Warning: If you want to update 'All' tables, 'Must' let [onlyUpdateSpecficTableArray] empty.
    var onlyUpdateSpecficTableArray = new string[] {};    

    // Step5: Start Generate.

    // Q: How to trigger Generate process ?
    // A: 
    //    1) When file was updated then save.
    //    2) Right click "MsSqlToModel.tt" then choose [Debug T4 Template] would be fine.
#>

<# var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = Path.GetDirectoryName(Host.TemplateFile)}; #>
<#
    // Database Connection
    SqlConnection conn = new SqlConnection(connectionString);
    conn.Open();

    // Table query
    System.Data.DataTable schema = conn.GetSchema("TABLES");
    string removeDefaultTableString = "database_firewall_rules,sysdiagrams"; // Remove sys.database_firewall_rules, sysdiagrams
    var totalRemoveTableString = string.Join(",", withoutSpecficTableArray) + "," + removeDefaultTableString;
    var removeTableArr = totalRemoveTableString.Split(',');
    List<int> removeTableIndexList = new List<int>();
    foreach (DataRow row in schema.Rows)
    {
        // Remove tables whitch exist from [withoutSpecficTableArray].
        if (removeTableArr.Contains(row["TABLE_NAME"]))
        {
            removeTableIndexList.Add(schema.Rows.IndexOf(row));
        }

        // Remove tables whitch do not exist from [onlyUpdateSpecficTableArray].
        if(onlyUpdateSpecficTableArray.Length > 0 && 
            !onlyUpdateSpecficTableArray.Contains(row["TABLE_NAME"]) &&
            !removeTableArr.Contains(row["TABLE_NAME"])){
            removeTableIndexList.Add(schema.Rows.IndexOf(row));          
        }
    }
    var indexList = removeTableIndexList.OrderByDescending(p => p).Distinct();
    foreach (var index in indexList)
    {
        schema.Rows[index].Delete();
    }
    string selectQuery = "select * from @tableName";
    SqlCommand command = new SqlCommand(selectQuery,conn);
    SqlDataAdapter ad = new SqlDataAdapter(command);
    System.Data.DataSet ds = new DataSet();

    // System information qyery
    string propQuery = "SELECT sobj.name AS TableName, scol.name AS ColumnName, sprop.[value] AS ColumnDescription FROM syscolumns as scol inner join sys.sysobjects as sobj on scol.id=sobj.id and sobj.xtype='U' and sobj.name<>'dtproperties' left join sys.extended_properties as sprop on scol.id=sprop.major_id and scol.colid=sprop.minor_id where sobj.name='@tableName' and scol.name='@columnName' and sobj.name <> 'database_firewall_rules'";
    SqlCommand command2 = new SqlCommand(propQuery,conn);
    SqlDataAdapter ad2 = new SqlDataAdapter(command2);
    System.Data.DataSet ds2 = new DataSet();
 #>

<# foreach(System.Data.DataRow row in schema.Rows) { #>
<# manager.StartBlock(row["TABLE_NAME"].ToString()+".cs"); #>
//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

using System;

namespace <#=customNameSpace#>
{
    /// <summary>
    /// DBTableName：<#= row["TABLE_NAME"].ToString() #>
    /// </summary>
    <# /* If there is some requir for serializable, just open the comment bellow.*/ #>
    <# /* [Serializable] */ #>

    public class <#= row["TABLE_NAME"].ToString() #>
    {
        <#
        ds.Tables.Clear();
        command.CommandText = selectQuery.Replace("@tableName","["+row["TABLE_NAME"].ToString()+"]");
        ad.FillSchema(ds, SchemaType.Mapped, row["TABLE_NAME"].ToString());
        foreach (DataColumn dc in ds.Tables[0].Columns)
        {
        #>
            <#
            ds2.Tables.Clear();
            command2.CommandText = propQuery.Replace("@tableName",row["TABLE_NAME"].ToString());
            command2.CommandText = command2.CommandText.Replace("@columnName",dc.ColumnName);
            ad2.Fill(ds2);
            #>

        ///<summary>
        ///<# if(manager.CheckAutoIncrementPrimaryKey(dc)){#> [Primary Key]<#}#> <#=ds2.Tables[0].Rows[0].ItemArray[2].ToString().Length == 0 ? dc.ColumnName : manager.RemoveBreakLine(ds2.Tables[0].Rows[0].ItemArray[2].ToString())#>
        ///</summary>
        public <#= manager.TransFromSqlType(dc.DataType.Name) #><# if(manager.MapCommonType(dc.DataType.Name).IsValueType && dc.AllowDBNull){#>?<#}#> <#= dc.ColumnName #> { get; set; }
        <#}#>

    }
}

<# manager.EndBlock(); #>

<#}#>

<#manager.Process(true);#>