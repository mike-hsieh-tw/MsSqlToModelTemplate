<#@ assembly name="System.Core"#>
<#@ assembly name="EnvDTE"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>

<#+

class Manager
{
    public struct Block {
        public String Name;
        public int Start, Length;
    }

    public List<Block> blocks = new List<Block>();
    public Block currentBlock;
    public Block footerBlock = new Block();
    public Block headerBlock = new Block();
    public ITextTemplatingEngineHost host;
    public ManagementStrategy strategy;
    public StringBuilder template;
    public String OutputPath { get; set; }

    public Manager(ITextTemplatingEngineHost host, StringBuilder template, bool commonHeader) {
        this.host = host;
        this.template = template;
        OutputPath = String.Empty;
        strategy = ManagementStrategy.Create(host);
    }

    public void StartBlock(String name) {
        currentBlock = new Block { Name = name, Start = template.Length };
    }

    public void StartFooter() {
        footerBlock.Start = template.Length;
    }

    public void EndFooter() {
        footerBlock.Length = template.Length - footerBlock.Start;
    }

    public void StartHeader() {
        headerBlock.Start = template.Length;
    }

    public void EndHeader() {
        headerBlock.Length = template.Length - headerBlock.Start;
    }

    public void EndBlock() {
        currentBlock.Length = template.Length - currentBlock.Start;
        blocks.Add(currentBlock);
    }

    public void Process(bool split) {
        String header = template.ToString(headerBlock.Start, headerBlock.Length);
        String footer = template.ToString(footerBlock.Start, footerBlock.Length);
        blocks.Reverse();
        foreach(Block block in blocks) {
            var fixOutputPath = Path.GetDirectoryName(OutputPath);  // 取得上一層的Path
            String fileName = Path.Combine(fixOutputPath, block.Name);
            if (split) {
                String content = header + template.ToString(block.Start, block.Length) + footer;
                strategy.CreateFile(fileName, content);
                template.Remove(block.Start, block.Length);
            } else {
                strategy.DeleteFile(fileName);
            }
        }
    }

    /// <summary>
    /// Sql type to C# type
    /// </summary>
    /// <param name="type"></param>
    /// <returns></returns>
    public string TransFromSqlType(string dbtype)
    {
         if (string.IsNullOrEmpty(dbtype)) return dbtype;
            string csharpType = "object";
            switch (dbtype)
            {
                case "Byte": csharpType = "byte"; break;
                case "SByte": csharpType = "sbyte"; break;
                case "Int16": csharpType = "short"; break;
                case "UInt16": csharpType = "ushort"; break;
                case "Int32": csharpType = "int"; break;
                case "UInt32": csharpType = "uint"; break;
                case "Int64": csharpType = "long"; break;
                case "UInt64": csharpType = "ulong"; break;
                case "Single": csharpType = "float"; break;
                case "Double": csharpType = "double"; break;
                case "Decimal": csharpType = "decimal"; break;
                case "Boolean": csharpType = "bool"; break;
                case "String": csharpType = "string"; break;
                case "StringFixedLength": csharpType = "char"; break;
                case "Guid": csharpType = "Guid"; break;
                case "DateTime": csharpType = "DateTime"; break;
                case "DateTimeOffset": csharpType = "DateTimeOffset"; break;
                case "Binary": csharpType = "byte[]"; break;
            }
            return csharpType;
    }

    /// <summary>
    /// Sql type to C# commonType
    /// </summary>
    /// <param name="string"></param>
    /// <returns></returns>
     public Type MapCommonType(string dbtype)
     {
        if (string.IsNullOrEmpty(dbtype)) return Type.Missing.GetType();
        Type commonType = typeof(object);
        switch (dbtype)
        {
            case "Byte": commonType =               typeof(byte); break;
            case "SByte": commonType =              typeof(sbyte); break;
            case "Int16": commonType =              typeof(short); break;
            case "UInt16": commonType =             typeof(ushort); break;
            case "Int32": commonType =              typeof(int); break;
            case "UInt32": commonType =             typeof(uint); break;
            case "Int64": commonType =              typeof(long); break;
            case "UInt64": commonType =             typeof(ulong); break;
            case "Single": commonType =             typeof(float); break;
            case "Double": commonType =             typeof(double); break;
            case "Decimal": commonType =            typeof(decimal); break;
            case "Boolean": commonType =            typeof(bool); break;
            case "String": commonType =             typeof(string); break;
            case "StringFixedLength": commonType =  typeof(char); break;
            case "Guid": commonType =               typeof(Guid); break;
            case "DateTime": commonType =           typeof(DateTime); break;
            case "DateTimeOffset": commonType =     typeof(DateTimeOffset); break;
            case "Binary": commonType =             typeof(byte[]); break;
        }
        return commonType;
    }

     /// <summary>
     /// Check is autoIncrement primary key
     /// </summary>
     /// <param name="DataColumn"></param>
     /// <returns></returns>
     public bool CheckAutoIncrementPrimaryKey(DataColumn currColumn)
     {
         if(currColumn.ReadOnly == true &&
            currColumn.AllowDBNull == false &&
            currColumn.Unique == true &&
            currColumn.AutoIncrement == true){
            return true;
         }
        return false;
    }

    /// <summary>
    /// Remove break line from comment
    /// </summary>
    /// <param name="string"></param>
    /// <returns></returns>
    public string RemoveBreakLine(string line){
        return line.Replace("\r\n", "，").Replace("\n", "，");
    }
}

class ManagementStrategy
{
    internal static ManagementStrategy Create(ITextTemplatingEngineHost host) {
        return (host is IServiceProvider) ? new VSManagementStrategy(host) : new ManagementStrategy(host);
    }

    internal ManagementStrategy(ITextTemplatingEngineHost host) { }

    internal virtual void CreateFile(String fileName, String content) {
        Encoding utf8 = new UTF8Encoding(true); // true means create utf-8 with BOM, false means no BOM
        File.WriteAllText(fileName, content, utf8);
    }

    internal virtual void DeleteFile(String fileName) {
        if (File.Exists(fileName))
            File.Delete(fileName);
    }
}

class VSManagementStrategy : ManagementStrategy
{
    private EnvDTE.ProjectItem templateProjectItem;

    internal VSManagementStrategy(ITextTemplatingEngineHost host) : base(host) {
        IServiceProvider hostServiceProvider = (IServiceProvider)host;
        if (hostServiceProvider == null)
            throw new ArgumentNullException("Could not obtain hostServiceProvider");

        EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
        if (dte == null)
            throw new ArgumentNullException("Could not obtain DTE from host");

        templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
    }

    internal override void CreateFile(String fileName, String content) {
        base.CreateFile(fileName, content);
        ((EventHandler)delegate { templateProjectItem.ProjectItems.AddFromFile(fileName); }).BeginInvoke(null, null, null, null);
    }

    internal override void DeleteFile(String fileName) {
        ((EventHandler)delegate { FindAndDeleteFile(fileName); }).BeginInvoke(null, null, null, null);
    }

    private void FindAndDeleteFile(String fileName) {
        foreach(EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems) {
            if (projectItem.get_FileNames(0) == fileName) {
                projectItem.Delete();
                return;
            }
        }
    }
}#>